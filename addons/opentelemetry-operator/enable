#!/usr/bin/env python3
# addons/opentelemetry-operator/enable

import os
import subprocess

import click

DEFAULT_NAMESPACE = "opentelemetry-operator"
KUBECTL = os.path.expandvars("$SNAP/microk8s-kubectl.wrapper")
HELMCTL = os.path.expandvars("$SNAP/microk8s-helm.wrapper")
MICROK8S_STATUS = os.path.expandvars("$SNAP/microk8s-status.wrapper")


@click.command()
@click.option("--version", required=False, default="0.78.2", type=str)
@click.option("--namespace", required=False, default=DEFAULT_NAMESPACE, type=str)
@click.option(
    "--collector-image",
    required=False,
    default="otel/opentelemetry-collector-k8s",
    type=str,
)
@click.option("--values", required=False, default="", type=str)
def main(version, namespace, collector_image, values):
    click.echo("Enabling opentelemetry-operator")

    subprocess.check_call(
        [
            HELMCTL,
            "repo",
            "add",
            "open-telemetry",
            "https://open-telemetry.github.io/opentelemetry-helm-charts",
        ]
    )

    install_args = [
        HELMCTL,
        "upgrade",
        "--install",
        "opentelemetry-operator",
        "open-telemetry/opentelemetry-operator",
        "--namespace",
        namespace,
        "--create-namespace",
        "--version",
        version,
    ]

    if values:
        click.echo(f"Using provided values file: {values}")
        install_args.extend(["-f", values])
    else:
        install_args.extend(["--set", f"manager.collectorImage.repository={collector_image}"])
        cert_manager_status = subprocess.run(
            [MICROK8S_STATUS, "status", "--addon cert-manager"],
            capture_output=True,
            text=True,
        )
        if cert_manager_status.returncode == 0 and "enabled" in cert_manager_status.stdout:
            click.echo("Cert-manager is installed. Using Cert-manager certificates instead.")
            install_args.extend(["--set", "admissionWebhooks.certManager.enabled=true"])
        else:
            click.echo("Cert-manager is not installed. Using auto-generated certificates instead.")
            install_args.extend(["--set", "admissionWebhooks.certManager.enabled=false"])
            install_args.extend(["--set", "admissionWebhooks.autoGenerateCert.enabled=true"])

    subprocess.check_call(install_args)

    click.echo("Enabled opentelemetry-operator")


if __name__ == "__main__":
    main()
